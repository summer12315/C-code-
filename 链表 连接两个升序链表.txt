#include <stdio.h>
#include <stdlib.h>

// 定义链表节点结构体
struct ListNode {
    int val;
    struct ListNode *next;
};

// 合并两个有序链表
struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {
    // 创建一个哨兵节点，用于简化链表操作，避免处理头节点为空的情况
    struct ListNode dummy = {}; 
    // cur 指针指向新链表的末尾，初始时指向哨兵节点
    struct ListNode* cur = &dummy; 
    // 当 list1 和 list2 都不为空时，进行比较合并操作
    while (list1 && list2) {
        // 如果 list1 当前节点的值小于 list2 当前节点的值
        if (list1->val < list2->val) {
            // 将 list1 当前节点连接到新链表的末尾
            cur->next = list1; 
            // list1 指针后移一位
            list1 = list1->next; 
        } else { 
            // 注：相等的情况加哪个节点都是可以的
            // 将 list2 当前节点连接到新链表的末尾
            cur->next = list2; 
            // list2 指针后移一位
            list2 = list2->next; 
        }
        // cur 指针后移一位，指向新链表的末尾
        cur = cur->next; 
    }
    // 当 list1 或 list2 其中一个为空时，将另一个链表的剩余部分直接连接到新链表的末尾
    cur->next = list1 ? list1 : list2; 
    // 返回合并后链表的头指针，即哨兵节点的下一个节点
    return dummy.next; 
}

// 创建一个新的链表节点
struct ListNode* createNode(int val) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = NULL;
    return newNode;
}

// 打印链表
void printList(struct ListNode* head) {
    struct ListNode* current = head;
    while (current != NULL) {
        printf("%d -> ", current->val);
        current = current->next;
    }
    printf("NULL\n");
}

int main() {
    // 创建第一个有序链表 1 -> 3 -> 5
    struct ListNode* list1 = createNode(1);
    list1->next = createNode(3);
    list1->next->next = createNode(5);

    // 创建第二个有序链表 2 -> 4 -> 6
    struct ListNode* list2 = createNode(2);
    list2->next = createNode(4);
    list2->next->next = createNode(6);

    // 合并两个有序链表
    struct ListNode* mergedList = mergeTwoLists(list1, list2);

    // 打印合并后的链表
    printf("Merged List: ");
    printList(mergedList);

    // 释放链表内存
    struct ListNode* temp;
    while (mergedList != NULL) {
        temp = mergedList;
        mergedList = mergedList->next;
        free(temp);
    }

    return 0;
}